#pragma once

#include "gmpxx.h"
#include <complex>
#include <iostream>
#include <tuple>
#include <vector>

#define DEF_PREC 1000

using namespace std;

namespace poseidon
{
namespace util
{
static string pi =
    "3."
    "1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421"
    "1706798214808651328230664709384460955058223172535940812848111745028410270193852110555964462294"
    "8954930381964428810975665933446128475648233786783165271201909145648566923460348610454326648213"
    "3936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204"
    "6652138414695194151160943305727036575959195309218611738193261179310511854807446237996274956735"
    "1885752724891227938183011949129833673362440656643086021394946395224737190702179860943702770539"
    "2171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409"
    "0122495343014654958537105079227968925892354201995611212902196086403441815981362977477130996051"
    "8707211349999998372978049951059731732816096318595024459455346908302642522308253344685035261931"
    "1881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875"
    "937519577818577805321712268066130019278766111959092164201989";

int max_index(const vector<double> &array);
tuple<int, vector<int>> gen_degrees(int degree, int k, double dev);
void BigintCos(const mpf_class &x, mpf_class &cosx);
void gen_nodes(const vector<int> &deg, double dev, int &totdeg, int k, int scnum, mpf_class *x,
               mpf_class *p, mpf_class *c);

vector<complex<double>> ApproximateCos(int k, int degree, double dev, int scnum);

}  // namespace util
}  // namespace poseidon
